}
get_center(center,c(1,1))
class = classify(data,center)
##  k均值聚类  ##
# function #
# 定义一个距离函数
distance <- function(x1,x2) {
temp = 0
for (i in 1:ncol(x1)) {
temp = temp + (x1[i] - x2[i])^2
}
return(as.numeric(sqrt(temp)))
}
# 根据中心点计算分类
classify <- function(data,center) {
class = c()
for (i in 1:nrow(data)) {
dist = c()
for (j in 1:nrow(center)) {
dist = append(dist,distance(data[i,],center[j,]))
}
class = append(class,which.min(dist))
}
}
# 根据分类计算中心点
get_center <- function(data, class) {
for (i in unique(class)) {
temp = data[class==i,]
center = rbind(colSums(temp)/nrow(temp))
}
return(center)
}
# data #
x1 = c(3,3,3,4,4,5,5,7,7,8)
x2 = c(4,6,8,5,7,1,5,3,4,5)
data = data.frame(x1,x2)
plot(data$x1,data$x2)
# k-means #
k = 2
index = sample(1:nrow(data),k)
center = data[index,]
class = classify(data,center)
class
# 根据中心点计算分类
classify <- function(data,center) {
class = c()
for (i in 1:nrow(data)) {
dist = c()
for (j in 1:nrow(center)) {
dist = append(dist,distance(data[i,],center[j,]))
}
class = append(class,which.min(dist))
}
return(class)
}
class = classify(data,center)
class
center = get_center(data,class)
center
# 根据分类计算中心点
get_center <- function(data, class) {
center = c()
for (i in unique(class)) {
temp = data[class==i,]
center = rbind(center,colSums(temp)/nrow(temp))
}
return(center)
}
center = get_center(data,class)
center
class = classify(data,center)
center = get_center(data,class)
class = classify(data,center)
center = get_center(data,class)
class = classify(data,center)
center = get_center(data,class)
class
center = get_center(data,class)
class = classify(data,center)
class
class1 = classify(data,center)
class == class1
center
center==center
center = data[index,]
class0 = c()
center == class0
sum(center == class0)
sum(center == center)
sum(!center == class0)
sum(!center == class0)==0
class == class0
class == class
while (TRUE){
class = classify(data,center0)
center = get_center(data,class)
if (sum(!center==center0)==0){
break
}
}
# k-means #
k = 2
index = sample(1:nrow(data),k)
center0 = data[index,]
while (TRUE){
class = classify(data,center0)
center = get_center(data,class)
if (sum(!center==center0)==0){
break
}
}
center
center0
sum(!center==center0)==0
while (TRUE){
class = classify(data,center0)
center = get_center(data,class)
if (sum(!center==center0)==0){
break
}
center0 = center
}
center
class
# data #
x1 = c(3,3,3,4,4,5,5,7,7,8)
x2 = c(4,6,8,5,7,1,5,3,4,5)
x3 = c(1,2,3,4,5,6,7,8,9,0)
data = data.frame(x1,x2)
#plot(data$x1,data$x2)
# k-means #
k = 2
index = sample(1:nrow(data),k)
center0 = data[index,]
while (TRUE){
class = classify(data,center0)
center = get_center(data,class)
if (sum(!center==center0)==0){
break
}
center0 = center
}
center
class
# data #
x1 = c(3,3,3,4,4,5,5,7,7,8)
x2 = c(4,6,8,5,7,1,5,3,4,5)
x3 = c(1,2,3,4,5,6,7,8,9,0)
#plot(data$x1,data$x2)
# k-means #
k = 4
index = sample(1:nrow(data),k)
center0 = data[index,]
while (TRUE){
class = classify(data,center0)
center = get_center(data,class)
if (sum(!center==center0)==0){
break
}
center0 = center
}
class
plot(data$x1,data$x2)
ggplot2::ggplot(data)
ggplot2::ggplot(data,aes(x1,x2))
ggplot2::ggplot(data,aes(x=x1,y=x2))
library(ggplot2)
ggplot(data,aes(x=x1,y=x2))
ggplot(data,aes(x=x1,y=x2,color=class))
ggplot(data,aes(x=x1,y=x2,color=class))+geom_point()
class
# k-means #
k = 2
index = sample(1:nrow(data),k)
center0 = data[index,]
while (TRUE){
class = classify(data,center0)
center = get_center(data,class)
if (sum(!center==center0)==0){
break
}
center0 = center
}
library(ggplot2)
ggplot(data,aes(x=x1,y=x2,color=class))+geom_point()
ggplot(data,aes(x=x1,y=x2,color=factor(class)))+geom_point()
##  k均值聚类  ##
# function #
# 定义一个距离函数
distance <- function(x1,x2) {
temp = 0
for (i in 1:ncol(x1)) {
temp = temp + (x1[i] - x2[i])^2
}
return(as.numeric(sqrt(temp)))
}
# 根据中心点计算分类
classify <- function(data,center) {
class = c()
for (i in 1:nrow(data)) {
dist = c()
for (j in 1:nrow(center)) {
dist = append(dist,distance(data[i,],center[j,]))
}
class = append(class,which.min(dist))
}
return(class)
}
# 根据分类计算中心点
get_center <- function(data, class) {
center = c()
for (i in unique(class)) {
temp = data[class==i,]
center = rbind(center,colSums(temp)/nrow(temp))
}
return(center)
}
#__main__#
# data #
x1 = c(3,3,3,4,4,5,5,7,7,8)
x2 = c(4,6,8,5,7,1,5,3,4,5)
data = data.frame(x1,x2)
#plot(data$x1,data$x2)
# k-means #
k = 2
index = sample(1:nrow(data),k)
center0 = data[index,]
while (TRUE){
class = classify(data,center0)
center = get_center(data,class)
if (sum(!center==center0)==0){
break
}
center0 = center
}
# 可视化 #
library(ggplot2)
ggplot(data,aes(x=x1,y=x2,color=factor(class)))+geom_point()
##  k均值聚类  ##
# function #
# 定义一个距离函数
distance <- function(x1,x2) {
temp = 0
for (i in 1:ncol(x1)) {
temp = temp + (x1[i] - x2[i])^2
}
return(as.numeric(sqrt(temp)))
}
# 根据中心点计算分类
classify <- function(data,center) {
class = c()
for (i in 1:nrow(data)) {
dist = c()
for (j in 1:nrow(center)) {
dist = append(dist,distance(data[i,],center[j,]))
}
class = append(class,which.min(dist))
}
return(class)
}
# 根据分类计算中心点
get_center <- function(data, class) {
center = c()
for (i in unique(class)) {
temp = data[class==i,]
center = rbind(center,colSums(temp)/nrow(temp))
}
return(center)
}
#__main__#
# data #
x1 = c(3,3,3,4,4,5,5,7,7,8)
x2 = c(4,6,8,5,7,1,5,3,4,5)
data = data.frame(x1,x2)
#plot(data$x1,data$x2)
# k-means #
k = 2
index = sample(1:nrow(data),k)
center0 = data[index,]
while (TRUE){
class = classify(data,center0)
center = get_center(data,class)
if (sum(!center==center0)==0){
break
}
center0 = center
}
# 可视化 #
library(ggplot2)
ggplot(data,aes(x=x1,y=x2,color=factor(class)))+geom_point()
center
data
class
unique(class)
library("ggplot2")
ggplot(mpg,aes(displ, hwy, color=class))+geom_point()
library("tidyverse")
x = c("google","runoob","taobao")
library(tidyverse)
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
c(c(),1234)
c(c(),1234)
total = c()
total = c(total,1234)
total
total = c(total,1234)
total
a = 1234
a[1:2]
a
a%%100
a%100
a - a%%100
mode(a)
a // 100
a / 100
floor(a/100)
123456
a = 123456
floor(a/10000)
a = 128456
floor(a/10000)
# plot
library(ggplot)
# plot
library(ggplot2)
ggplot()+
geom_map(
data=world,map=world,
aes(long,lat,map_id=region)
)
world <- map_data("world")
ggplot()+
geom_map(
data=world,map=world,
aes(long,lat,map_id=region)
)
ggplot()+
geom_map(
data=world,map=world,
aes(x=long,y=lat,map_id=region)
)
ggplot()+
geom_map(
data=world,map=world,
aes(x=long,y=lat,map_id=region),
color="black",fill="lightgray",size=0.1
)
ggplot()+
geom_map(
data=world,map=world,
aes(x=long,y=lat,map_id=region),
color="black",fill="lightgray",linewidth=0.1
)
ggplot()+
geom_map(
data=world,map=world,
aes(x=long,y=lat,map_id=region),
color="black",fill="lightgray",linewidth=0.1
)+
theme_void()
View(world)
install.packages("sf")
# install.packages("ggplot2")
# install.packages("sf")
library(ggplot2)
library(sf)
# Import a geojson or shapefile
map <- read_sf("https://raw.githubusercontent.com/R-CoderDotCom/data/main/shapefile_spain/spain.geojson")
# Import a geojson or shapefile
map <- read_sf("https://raw.githubusercontent.com/R-CoderDotCom/data/main/shapefile_spain/spain.geojson")
# Import a geojson or shapefile
map <- read_sf("https://raw.githubusercontent.com/R-CoderDotCom/data/main/shapefile_spain/spain.geojson")
ggplot(map) +
geom_sf(color = "white", aes(fill = unemp_rate)) +
theme(legend.position = "none")
# install.packages("ggplot2")
# install.packages("sf")
library(ggplot2)
library(sf)
# Import a geojson or shapefile
map <- read_sf("https://raw.githubusercontent.com/R-CoderDotCom/data/main/shapefile_spain/spain.geojson")
rnorm()
rnorm()
rnorm(1)
pbest = data.frame(value=ones(30))
pbest = data.frame(value=ones(30))
pbest = data.frame(value=one(30))
pbest = data.frame(value=1:30)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='ipwvff-yang-liu', token='E7C762713C3BA6C4DEF5C633A4AEE565', secret='ntUY3/9I+CR1QYE7uJtfgPHnhKZc9SSa/cr1c6T/')
library(rsconnect)
rsconnect::deployApp("D:/liu/shiny/untitled/untitled/app.R")
rsconnect::deployApp("D:/liu/shiny/untitled/untitled/")
shiny::runApp('D:/liu/shiny/untitled/untitled')
shiny::runApp('D:/liu/shiny/untitled/untitled')
shiny::runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp()
runApp()
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
?renderReactable
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
updateReactable()
?updateReactable()
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
shiny::runApp('D:/liu/shiny/PPPS')
shiny::runApp('D:/liu/shiny/PPPS')
rsconnect::setAccountInfo(name='ipwvff-yang-liu', token='E7C762713C3BA6C4DEF5C633A4AEE565', secret='ntUY3/9I+CR1QYE7uJtfgPHnhKZc9SSa/cr1c6T/')
rsconnect::setAccountInfo(name='ipwvff-yang-liu', token='E7C762713C3BA6C4DEF5C633A4AEE565', secret='ntUY3/9I+CR1QYE7uJtfgPHnhKZc9SSa/cr1c6T/')
rsconnect::setAccountInfo(name='ipwvff-yang-liu', token='E7C762713C3BA6C4DEF5C633A4AEE565', secret='ntUY3/9I+CR1QYE7uJtfgPHnhKZc9SSa/cr1c6T/')
rsconnect::setAccountInfo(name='ipwvff-yang-liu', token='E7C762713C3BA6C4DEF5C633A4AEE565', secret='ntUY3/9I+CR1QYE7uJtfgPHnhKZc9SSa/cr1c6T/')
shiny::runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp()
runApp()
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
runApp('D:/liu/shiny/PPPS')
shinyMlr::runShinyMlr()
validateTask
reqAndAssign
?reqAndAssign
runApp('D:/liu/shiny/PPPS')
require(tools)
require(httr)
require(mlr)
require(stringi)
require(readr)
require(RWeka)
require(BBmisc)
require(checkmate)
require(ParamHelpers)
require(farff)
require(OpenML)
require(ggplot2)
require(DT)
require(parallelMap)
require(rmarkdown)
require(xtable)
require(plyr)
require(GGally)
require(plotly)
setwd("D:\liu\SkillTree\R\Shiny")
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
setwd("D:\liu\SkillTree\R\Shiny")
setwd("D:\liu\SkillTree\R\Shiny")
setwd("D:/liu/SkillTree/R/Shiny")
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
setwd("D:/liu/SkillTree/R/Shiny/ER injuries/")
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
View(injuries)
injuries
products <- vroom("neiss/products.tsv")
population
products
rm(list = c())
rm(list=c())
rm(list=ls())
setwd("D:/liu/SkillTree/R/Shiny/ER injuries/")
rm(list=ls())
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom("neiss/injuries.tsv.gz")
population
products
population <- vroom("neiss/population.tsv")
setwd("D:/liu/Skill-Tree/R/Shiny/ER injuries/")
rm(list=ls())
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom("neiss/injuries.tsv.gz")
products <- vroom("neiss/products.tsv")
population <- vroom("neiss/population.tsv")
